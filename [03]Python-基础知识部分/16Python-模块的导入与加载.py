# -*- coding:utf-8 -*-
# @Desc : 
# @Author : Administrator
# @Date : 2019-07-03 10:46

## 模块Module: 模块就是一个.py文件
# 模块的作用:
# 让一些相关的数据，函数，类等有逻辑的组织在一起，使逻辑结构更加清晰
# 模块中的数据，函数和类等可提供给其它模块或程序使用

# 模块的分类:
# 1.内置模块(builtins)，在解析器的内部可以直接使用 ---> len, max, min, ...
# 2.标准库模块，安装Python时已安装且可直接使用     ---> .py
# 3.第三方模块(通常为开源),需要自己手动安装        ---> pip install 模块名
# 4.用户自己完成的模块(可以作为其它人的第三方模块) ---> 自定义.py

## 模块的导入语句:
# import 语句:
# 语法: import 模块名1[as 模块新名1][,模块名2 [as 模块新名2]], ...
# 作用: 将某模块整体导入到当前模块
# 用法: 模块.属性名

# from import 语句:
# 语法: from 模块名 import 模块属性名1 [as 属性新名1][,模块属性名2[as 属性新名2], ...]
# 作用：将某模块内的一个或多个属性导入到当前模块的作用域
# 示例如下:
from math import pi
from math import pow, sqrt
from math import factorial as fac

# from import * 语句:
# 语法: from 模块名 import *
# 作用: 将某模块的所有属性都导入到当前模块


## import语句 搜索模块的路径顺序:
# 1.搜索程序运行时的路径(当前路径)
# 2.sys.path 提供的路径
# 3.搜索内置模块


## sys.path 是一个存储模块搜索路径的列表:
# 1.可以把自定义的模块放在相应的路径下可以导入
# 2.可以把自定义模块的路径添加在sys.path列表中   ---> sys.path.append("自定义模块路径") 或 sys.path.insert(0,自定义模块路径)


## 模块的加载过程:
# 1.在模块导入时，模块的所有语句会执行一遍
# 2.如果一个模块已经以导入，则再次导入时不会重新执行模块内的语句


## 模块导入和执行的过程:
# 1.先搜索相关的路径找模块(.py)
# 2.判断是否有此模块对应的.pyc文件，如果存在pyc文件且比.py文件新，则直接加载.pyc文件
# 3.否则用.py文件生成.pyc后再进行加载
## pyc 模块的编译文件
#           编译             解释执行
# mymod1.py ----> mymod1.pyc --------> python3



## dir([对象]) 函数: 返回一个字符串列表
# 作用:
# 一、如果没有参数调用，则返回当前作用域内的所有变量的列表
# 二、如果给定一个对象作为参数，则返回这个对象的所有变量的列表
# 1. 对于一个模块，返回这个模块的全部属性
# 2. 对于一个类对象,返回类对象的所有变量，亲递归基类对象的所有变量
# 3. 对于其它对象，返回所有的变量，类变量，基类变量


## 模块的属性: 实质是变量(是模块内的全局变量)
## 模块的隐藏属性: 以 _ 开头的属性为隐藏属性,隐藏属性在from xxx import * 时不会被导入


## 模块的内置属性:
# __doc__属性: 用来绑定模块的文档字符串(模块内第一个没有赋值给任何变量的字符串为模块的文档字符串)
# __file__属性: 绑定模块对应的文档路径名
# 1. 对于内建模块，不绑定路径(没有__file__属性)
# 2. 对于其它模块，绑定路径名的字符串
# __name__属性: 用来记录模块的自身名字
# 作用：
# 1. 记录模块名
# 2. 用来判断是否为主模块(最先运行的模块)
# 说明:
# 当此模块为主模块时，__name__绑定 '__main__'
# 当此模块不是主模块时，此属性绑定模块名


## 模块的__all__列表: 是一个用来存放可导出属性的 字符串列表
# 作用: 当用 from import * 语句导入时，只导入 __all__ 列表内的属性
# 示例如下:
# demo1.py
__all__ = ['func1','func3','var2','var3']
def func1():
    pass
def func2():
    pass
def func3():
    pass
var1 = "hello"
var2 = "ni"
var3 = "hao"
# demo2.py中导入demo1模块
# from demo1 import *  # --->  func1, fun3, var2, var3


## 包(package): 模块包,包是将模块以文件夹的组织形式进行分组管理的方法
# 包示例如下:
# mypack/
#     __init__.py
#     menu.py
#     games/
#         __init__.py
#         contra.py
#         supermario.py
#         tanks.py
#     office/
#         __init__.py
#         excel.py
#         word.py

# __init__.py: 常规包内必须存在的文件
# __init__.py: 会在包加载时被自动调用

# 包的加载路径: 同模块的加载路径相同
# 1.当前文件夹
# 2.sys.path给出的路径



