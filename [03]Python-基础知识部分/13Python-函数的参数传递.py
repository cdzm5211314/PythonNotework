# -*- coding:utf-8 -*-
# @Desc : 
# @Author : Administrator
# @Date : 2019-07-03 9:11


### 函数的参数传递:

## 位置参数: 实际参数(实参)的对应关系与形式参数(形参)的对应关系是按位置来依次对应的
# 示例如下:
def myfun(a, b, c):
    pass
myfun(1, 2, 3)
# 位置参数说明:
# 1. 实际参数和形式参数通过位置进行传递的匹配
# 2. 实参个数必须与形参个数相同


## 序列参数: 序列传参是指在函数调用过程中，用 * 将序列拆解后按位置传参的方式进行参数传递
# 示例如下:
def myfun(a, b, c):
    pass
s = [1, 2, 3]
myfun(*s)  # * 表示把s拆开
s2 = "ABC"
myfun(*s2)


## 关键字参数:
# 1.关键字传参是指传参时，按着形参的名称给形参赋值
# 2.实参和形参按名称进行匹配
# 示例如下:
def myfun(a, b, c):
    pass
myfun(b=22, c=33, a=11)  # 等同于myfun(11,22,33)
myfun(c=3, b=2, a=1)
# 关键字参数说明: 实参和形参可以不按位置匹配

## 字典关键字参数：是指实参为字典，将字典用 ** 拆解后进行关键字传参
# 示例如下:
def myfun(a, b, c):
    pass
d = {'c': 33, 'b': 22, 'a': 11}
myfun(**d)  # 拆解字典后再传参
# 关键字参数说明:
# 1.字典的键名和形参名必须一致
# 2.字典键名必须为字符串
# 3.字典的键名要在形参中存在


## 缺省参数:
# 语法:
# def 函数名(形参名1=默认实参1, 形参名2=默认实参2, ...):
#     pass
# 示例如下:
def info(name, age=1, address="未填写"):
    print(name, "今年", age, '岁, 家庭地址是:', address)
info('tarena', 15)
info('小魏', 20, '北京市朝阳区')
info('小李')
# 缺省参数说明:
# 1. 缺省参数必须自右至左依次存在,如果一个参数有缺省参数，则其右侧的所有参数都必须有缺省参数
# 如: def test(a, b=10, c):  # 函数定义是错的
# 2. 缺省参数可以有0个或多个,甚至全部都有缺省参数

############################################################################################

# 位置形参:
# 语法: def 函数名(形参名1, 形参名2, ...):

# 星号元组形参:
# 语法: def 函数名(*元组形参名):
# 作用：收集多个的位置传参
# 说明: 元组形参名通常用: 'args'

# 命名关键字形参:
# 语法:
# 1. def 函数名(*, 命名关键字形参):
# 2. def 函数名(*args, 命名关键字形参):
# 作用：所有的参数都必须用关键字传参或字典关键字传参传递

## 双星号字典形参:
# 语法: def 函数名(**字典形参名):
# 作用：收集多个的关键字传参
# 说明: 通常字典形参名定为: "kwargs"


## 函数的参数说明: 缺省参数，位置形参，星号元组形参，命名关键字形参和双号星字典形参可以混合使用

## 参数自左至右的顺序为: 位置形参 ---> 星号元组形参 ---> 命名关键字形参 ---> 双星号字典形参

## 不定长参数: 可以接收任意的位置传参和关键字传参
def func( *args, **kwargs ):
    print(args)  # (2, 'zhangsan', 'a', 'b', 'c')
    print(kwargs)  # {'age': 15, 'name': '张三'}

func(2,"zhangsan",*['a','b','c'],age=15,**{'name':'张三'})

