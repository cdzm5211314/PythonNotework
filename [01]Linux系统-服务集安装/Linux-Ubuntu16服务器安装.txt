### Ubuntu系统开机提示"检测到系统程序出现问题": >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
1. sudo apt install gksu
2. gksu gedit /etc/default/apport
3. 修改内容: enable = 1 ---> enable = 0

### Ubuntu安装Notepad++(notepadqq): >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
安装:
sudo add-apt-repository ppa:notepadqq-team/notepadqq
sudo apt-get update
sudo apt-get install notepadqq
卸载:
sudo apt-get remove notepadqq
sudo add-apt-repository --removeppa:notepadqq-team/notepadqq



### Ubuntu升级自带的Python3.5 ---> Python3.6:	>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
1. sudo add-apt-repository ppa:jonathonf/python-3.6
2. sudo apt-get update
3. sudo apt-get install python3.6
# 期间需要: Yes
# 调整Python3的优先级，使得3.6优先级较高
4. sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.5 1
5. sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.6 2
# 现在系统python默认为Python2，需要修改为Python3
6. [可略]sudo update-alternatives --install /usr/bin/python python /usr/bin/python2 100
7. [可略]sudo update-alternatives --install /usr/bin/python python /usr/bin/python3 150



### Ubuntu安装Python虚拟环境:	>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
1. sudo apt-get install python-virtualenv
2. sudo apt-get install virtualenvwrapper
# 或者已安装pip: 执行下面命令
# sudo pip install virtualenv
# sudo pip install virtualenvwrapper
3. 配置virtualwrapper环境变量: sudo vim ~/.bashrc 添加内容如下
export WORKON_HOME=$HOME/.virtualenvs
source /usr/share/virtualenvwrapper/virtualenvwrapper.sh
4. 执行生效命令: source ~/.bashrc



### Python3虚拟环境的使用: /home/chendong/.virtualenvs/[创建的虚拟环境]	>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# 创建虚拟环境: mkvirtualenv 环境名称(此环境是根据系统变量环境创环境,即Python2)
# 创建Python3环境: mkvirtualenv --python=/usr/bin/pyhton3 虚拟环境名称  [未通过]
# 创建Python3环境: mkvirtualenv -p /usr/bin/python3.6 虚拟环境名称  	[通过]
# 进入/切换虚拟环境: workon name
# 退出虚拟环境: deactivate
# 删除已虚拟环境: rmvirtualenv 环境名称



### Ubuntu安装PyCharm开发软件:	>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# 第一种方式: [已通过]
1. snap安装最新版: sudo snap install pycharm-professional --classic
2. [可略]snap卸载软件包: sudo snap remove pycharm-community pycharm-professional
3. 进入: cd /snap/pycharm-professional/136/bin  启动执行: sh pycharm.sh
4. 然后搜索pycharm,然后加入左侧快速启动栏
# 第二种方式:
1. 解压: tar -zxvf pycharm-professional-2017.3.5.tar.gz
2. 进入到解压的bin目录下执行: sh ./pycharm.sh
3. 完成破解...



### Ubuntu安装搜狗输入法: >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
1. 下载并上传: https://pinyin.sogou.com/linux/?r=pinyin
2. sudo dpkg -i sogoupinyin_2.2.0.0108_amd64.deb
3. sudo apt-get -f install
4. sudo apt-get update --fix-missing
5. sudo dpkg -i sogoupinyin_2.2.0.0108_amd64.deb
# 安装好后进行配置: im-config
# 重启Ubuntu系统后: fcitx-config-gtk3



### Ubuntu设置Firefox为中文版:	>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
第一种方式:
1.火狐浏览器输入: http://ftp.mozilla.org
2. 语言包在xpi目录下，简体中文（zh-CN.xpi）/繁体（zh-TW.xpi）
如: http://ftp.mozilla.org/pub/firefox/releases/65.0.1/linux-x86_64/xpi/zh-CN.xpi
第二种方式: [通过]
1. sudo apt-get install firefox
2. sudo apt-get install firefox-locale-zh-hans



### Ubuntu安装Google浏览器:	>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
1. wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
2. sudo dpkg -i google-chrome-stable_current_amd64.deb



### Ubuntu安装JDK8: >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
## 第一种JDK: OpenJDK版本: [未测试]
1. 更新软件包列表: sudo apt-get update
2. 安装Java_JDK: sudo apt-get install openjdk-8-jdk
3. 查看JDK版本: java -version
## 第二种JDK: Oracle_Java_JDK版本:
# 第一种方式安装: 在线安装[未通过]
1. 安装依赖包: sudo apt-get install python-software-properties
2. 添加仓库源: sudo add-apt-repository ppa:webupd8team/java
2.1 添加仓库源报错: No module named 'apt_pkg'
2.2 添加仓库源解决:
sudo apt-get remove --purge python-apt
sudo apt-get install -f -y python-apt
cd /usr/lib/python3/dist-packages/
sudo cp apt_pkg.cpython-35m-x86_64-linux-gnu.so apt_pkg.cpython-36m-x86_64-linux-gnu.so
3. 更新软件包列表: sudo apt-get update
4. 安装Java_JDK: sudo apt-get install oracle-java8-installer
5. 查看JDK版本: java --version

注: 如果同时安装了开源版本OpenJDK和Oracle官方版本JDK,可以自由切换:
sudo update-alternatives --config java
# 结果中带有*号表示当前正在使用的JDK版本,键入编号选择使用哪个版本
添加Java_JDK环境变量: sudo vim /etc/profile
Oracle_JDK版本: export JAVA_HOME="/usr/lib/jvm/java-8-oracle/jre/bin"
OpenJDK版本: export JAVA_HOME="/usr/lib/jvm/java-8-openjdk-amd64/jre/bin"

# 第二种方式安装: 下载文件安装[已通过]
1. 下载Oracle_JDK并上传到/opt/目录下: jdk-7u79-linux-x64.gz
2. sudo tar -zxvf jdk-7u79-linux-x64.gz
3. 添加Java_JDK环境变量: sudo vim /etc/profile 或者 sudo vim /etc/environment
JAVA_HOME=/opt/jdk1.7.0_79
PATH=/opt/jdk1.7.0_79/bin:$PATH
export JAVA_HOME PATH
4. 使配置生效: source /etc/profile 或者 source /etc/environment
5. 查看JDK版本: java -version  或 javac



### Ubuntu安装Tomcat: (8080) >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
## 使用在线安装:
1. 更新软件包管理器: sudo apt-get update
2. 安装Tomcat7: sudo apt-get install tomcat7
3. 通过服务开启、关闭、重启 Tomcat7:
sudo service tomcat7 start
sudo service tomcat7 stop
sudo service tomcat7 start
## 使用下载安装: [已通过]
1. 下载Tomcat并上传到/opt/目录下: apache-tomcat-7.0.75.tar.gz
2. sudo tar -zxvf apache-tomcat-7.0.75.tar.gz
3. 编辑Tomcat启动脚本: sudo vim /opt/apache-tomcat-7.0.75/bin/startup.sh 最前面添加如下内容:
JAVA_HOME=/opt/jdk1.7.0_79
JRE_HOME=/opt/jdk1.7.0_79/jre
PATH=$JAVA_HOME/bin:$JRE_HOME:$PATH
CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar
TOMCAT_HOME=/opt/apache-tomcat-7.0.75
4. 启动Tomcat服务器: 进入到Tomcat服务的bin目录下
sudo ./startup.sh
5. 查看是否安装成功: http://IP:8080/
6. 设置开机Tomcat自启动:
# 第一种方式: [未通过]
sudo cp /opt/apache-tomcat-7.0.75/bin/catalina.sh /etc/init.d/
sudo mv /etc/init.d/catalina.sh tomcat
sudo vi /etc/init.d/tomcat
CATALINA_HOME=/opt/apache-tomcat-7.0.75
JAVA_HOME=/opt/jdk1.7.0_79
sudo  chmod  755  /etc/init.d/tomcat
# 启动服务和添加到自启服务中:
添加到自启服务命令: update-rc.d –f tomcat defaults
删除到自启服务命令: update-rc.d –f tomcat remove
启动服务命令: service tomcat start
关闭服务命令：service tomcat stop
# 第二种方式: [已通过]
sudo vim /etc/rc.local  ---> 添加如下内容: (注:要添加在exit 0前面,然后reboot试试)
export JAVA_HOME=/opt/jdk1.7.0_79
/opt/apache-tomcat-7.0.75/bin/startup.sh start
sudo chmod 777 /etc/rc.local



### Ubuntu安装MySQL: [root/root, 3306] >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
1. 查看系统是否安装过MySQL服务:
sudo netstat -tap | grep mysql
2. 安装MySQL服务:
sudo apt-get install mysql-server   ---> 需要设置MySQL服务root账号的密码:root
sudo apt install mysql-client
sudo apt install libmysqlclient-dev
3.查看是否成功安装并启动MySQL服务:
sudo netstat -tap | grep mysql
4. 登陆访问MySQL服务:
mysql -uroot -p   ---> 输入密码
mysql -h IP -u root -p
5. 设置MySQL允许远程访问:
编辑文件: sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf
注释内容: bind-address = 127.0.0.1:
登陆访问: mysql -uroot -p ---> 输入密码   或 mysql -h IP地址 -uroot -p ---> 输入密码
设置允许远程访问:
grant all on *.* to root@'%' identified by '你的密码' with grant option;
flush privileges;
quit
6. 重启服务: sudo service mysql restart



### Ubuntu安装Redis: (密码:password 默认端口:6379) >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
1. sudo apt-get install redis-server
# 查看Redis服务器系统进程:
sudo ps -aux|grep redis
# 通过启动命令检查Redis服务器状态:
sudo netstat -nlt|grep 6379
或 sudo /etc/init.d/redis-server status
2. 客户端访问Redis服务: 未设置密码
redis-cli
## 修改Redis配置信息:
3. 设置Redis服务密码
sudo vi /etc/redis/redis.conf
取消注释并设置密码: requirepass password
4. 设置Redis允许远程访问
sudo vi /etc/redis/redis.conf
注释[69行]: bind 127.0.0.1
5. 重启Redis服务器
sudo /etc/init.d/redis-server restart
# 远程客户端访问Redis服务:
redis-cli  ---> auth password
或 redis-cli -a password
或 redis-cli -a password -h IP



### Ubuntu安装MongoDB: (默认端口:27017) >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
1. 安装: sudo apt-get install mongodb
# 查看mongodb是否安装成功: mongo -version
# 查看mongodb服务运行状态: systemctl status mongodb.service
2. 本机访问MongoDB服务: mongo
3. 查看MongoDB系统默认安装位置: locate mongo
## MongoDB配置文件信息: sudo vi /etc/mongodb.conf
# dbpath=/var/lib/mongodb               # 存放数据库文件的地方
# logpath=/var/log/mongodb/mongodb.log  # 存放log的地方
# #bind_ip = 127.0.0.1                  # 设置远程访问  mongo 10.0.244.100:27017/demo
4. 关闭与启动MongoDB:
sudo service mongodb stop 　　
sudo service mongodb start
5. 设置默认随Ubuntu启动: pgrep mongo -l  # 注意：-l是英文字母l，不是阿拉伯数字1
6. 设置密码访问: 略...



### Ubuntu搭建FastDFS+Ngnix分布式存储服务器: >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
## (一):首先安装FastDFS依赖包:
1. 解压缩: sudo unzip libfastcommon-master.zip
2. 进入到解压目录: cd libfastcommon-master
3. 执行 sudo ./make.sh
4. 执行 sudo ./make.sh install
## (二):再安装FastDFS:
1. 解压缩: sudo unzip fastdfs-master.zip
2. 进入到解压目录: cd fastdfs-master
3. 执行: sudo ./make.sh
4. 执行: sudo ./make.sh install
## (三):配置跟踪服务器tracker:
1. sudo cp /etc/fdfs/tracker.conf.sample /etc/fdfs/tracker.conf
2. 在home用户目录下创建目录: sudo mkdir –p /home/chendong/fastdfs/tracker
3. 编辑/etc/fdfs/tracker.conf配置文件: sudo vim /etc/fdfs/tracker.conf
修改内容: [23行] base_path=/home/chendong/fastdfs/tracker
## (四):配置存储服务器storage:
1. sudo cp /etc/fdfs/storage.conf.sample /etc/fdfs/storage.conf
2. 在用户目录下创建目录: sudo mkdir –p /home/chendong/fastdfs/storage
3. 编辑/etc/fdfs/storage.conf配置文件: sudo vim /etc/fdfs/storage.conf
修改内容如下：
[41行]  base_path=/home/chendong/fastdfs/storage
[109行] store_path0=/home/chendong/fastdfs/storage
[118行] tracker_server=自己Ubuntu虚拟机IP地址:22122
## (五):启动tracker 和 storage:
sudo service fdfs_trackerd start
sudo service fdfs_storaged start
# 设置FastDFS开机自启动: sudo vim /etc/rc.local
/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf restart
/usr/bin/fdfs_storaged /etc/fdfs/storage.conf restart
# 注:第五步报错: reboot
## (六):测试是否安装成功:
1. sudo cp /etc/fdfs/client.conf.sample /etc/fdfs/client.conf
2. 编辑/etc/fdfs/client.conf配置文件: sudo vim /etc/fdfs/client.conf
修改内容如下：
[10行] base_path=/home/chendong/fastdfs/tracker
[14行] tracker_server=自己Ubuntu虚拟机IP地址:22122
3. 上传文件测试：
fdfs_upload_file /etc/fdfs/client.conf 要上传的图片文件路径
注: 如果返回类似group1/M00/00/00/rBIK6VcaP0aARXXvAAHrUgHEviQ394.jpg的文件id则说明文件上传成功!!!
# group1/M00/00/00/wKgXj10Ydq-ANiDqAACP9detDNM079.jpg

## (七):安装 Nginx 及 fastdfs-nginx-module: [Ngnix端口80]
1. 解压缩: sudo tar -zxvf nginx-1.8.1.tar.gz
2. 解压缩: sudo unzip fastdfs-nginx-module-master.zip
3. 进入到nginx-1.8.1解压目录: cd nginx-1.8.1
4. 执行:
sudo ./configure --prefix=/usr/local/nginx/ --add-module=fastdfs-nginx-module-master(解压后目录的绝对路径)/src
如: sudo ./configure --prefix=/usr/local/nginx/ --add-module=/home/chendong/fastdfs-nginx-module-master/src
报错: 缺少PCRE库 ---> 解决方式: sudo apt-get install libpcre3 libpcre3-dev
sudo ./make ---> sudo make
sudo ./make install ---> sudo make install
5. sudo cp fastdfs-nginx-module-master(解压后目录的绝对路径)/src/mod_fastdfs.conf  /etc/fdfs/mod_fastdfs.conf
6. sudo vim /etc/fdfs/mod_fastdfs.conf
修改内容如下：
[3行]  connect_timeout=10
[40行] tracker_server=自己Ubuntu虚拟机IP地址:22122
[53行]url_have_group_name = true
[62行]store_path0=/home/chendong/fastdfs/storage
7. sudo cp fastdfs-master(解压后目录的绝对路径)/conf/http.conf  /etc/fdfs/http.conf
8. sudo cp fastdfs-master(解压后目录的绝对路径)/conf/mime.types /etc/fdfs/mime.types
9. sudo vim /usr/local/nginx/conf/nginx.conf ---> 在http部分中添加配置信息如下：
server {
            listen       8888;
            server_name  localhost;
            location ~/group[0-9]/ {
                ngx_fastdfs_module;
            }
            error_page   500 502 503 504  /50x.html;
            location = /50x.html {
            root   html;
            }
        }
10. 启动Nginx服务: sudo /usr/local/nginx/sbin/nginx
# 设置Ngnix开机自启动: sudo vim /etc/rc.local
/usr/local/nginx/sbin/nginx
11. 浏览器访问测试: http://IP:8888/group1/M00/00/00/wKgXj10Ydq-ANiDqAACP9detDNM079.jpg
## (八): 使用Python客户端上传测试 :
1. 进入到Python虚拟环境: workon python36
2. 进入到fdfs_client-py-master.zip文件的所在目录
3. pip install fdfs_client-py-master.zip ---> 报错
# 解决报错: sudo apt-get install python3.6-dev
4. 测试代码如下: [未通过]
>>> from fdfs_client.client import Fdfs_client
>>> client = Fdfs_client('/etc/fdfs/client.conf')
>>> ret = client.upload_by_filename('test')
>>> ret
{'Group name':'group1','Status':'Upload successed.', 'Remote file_id':'group1/M00/00/00/
	wKjzh0_xaR63RExnAAAaDqbNk5E1398.py','Uploaded size':'6.0KB','Local file name':'test'
	, 'Storage IP':'192.168.243.133'}
# 文档: https://github.com/jefforeilly/fdfs_client-py